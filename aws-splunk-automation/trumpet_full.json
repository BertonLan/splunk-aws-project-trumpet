{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template for AWS data ingest into Splunk using firehose",
  "Parameters": {
    "SplunkHttpEventCollectorURL": {
      "Description": "The HEC endpoint server and port (default 8088) of the the Splunk environment which will receive AWS data. (format - https://server:port/services/collector)",
      "Type": "String"
    },
    "CloudTrailSplunkHttpEventCollectorToken": {
      "Description": "The enabled HEC token on the Splunk environment for the aws:cloudtrail sourcetype. (format - 12345678-qwer-asdf-zxcv-123456789qwe)",
      "Type": "String"
    },
    "ConfigSplunkHttpEventCollectorToken": {
      "Description": "The enabled HEC token on the Splunk environment for the aws:config sourcetype. (format - 12345678-qwer-asdf-zxcv-123456789qwe)",
      "Type": "String"
    },
    "ConfigNotificationSplunkHttpEventCollectorToken": {
      "Description": "The enabled HEC token on the Splunk environment for the aws:config:notification sourcetype. (format - 12345678-qwer-asdf-zxcv-123456789qwe)",
      "Type": "String"
    },
    "CloudWatchSplunkHttpEventCollectorToken": {
      "Description": "The enabled HEC token on the Splunk environment for the aws:cloudwatch sourcetype. (format - 12345678-qwer-asdf-zxcv-123456789qwe)",
      "Type": "String"
    }
  },
  "Resources": {
    "S3BucketConfig": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "ConfigRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "config.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSConfigRole"
        ],
        "Policies": [
          {
            "PolicyName": "ConfigRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3BucketConfig"
                        },
                        "/AWSLogs/",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "/*"
                      ]
                    ]
                  },
                  "Condition": {
                    "StringLike": {
                      "s3:x-amz-acl": "bucket-owner-full-control"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "config:Put*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetBucketAcl"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3BucketConfig"
                        }
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "BackingLambdaExecutionConfigLogProcessorRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "BackingLambdaExecutionConfigLogProcessorPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:getObject",
                    "s3:putObject",
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "ConfigurationRecorderSanitisationResults",
                            "FinalS3BucketConfigArn"
                          ]
                        },
                        "/AWSLogs/",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/"
      }
    },
    "BackingLambdaConfigLogProcessor": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "lambda_code/config_snapshot_logger",
        "Description": "Stream events from an AWS S3 bucket being updated by AWS config to Splunk using HTTP event collector",
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "BackingLambdaExecutionConfigLogProcessorRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 300,
        "Environment": {
          "Variables": {
            "SPLUNK_HEC_URL": {
              "Ref": "SplunkHttpEventCollectorURL"
            },
            "SPLUNK_HEC_TOKEN": {
              "Ref": "ConfigSplunkHttpEventCollectorToken"
            }
          }
        }
      }
    },
    "ConfigBucketConfiguration": {
      "Type": "Custom::S3ConfigBucketConfiguration",
      "DependsOn": [
        "ConfigBucketPermission"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ConfigUpdateBucketConfiguration",
            "Arn"
          ]
        },
        "Bucket": {
          "Fn::GetAtt": [
            "ConfigurationRecorderSanitisationResults",
            "FinalS3BucketConfig"
          ]
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "BackingLambdaConfigLogProcessor",
                  "Arn"
                ]
              }
            }
          ]
        }
      }
    },
    "ConfigUpdateBucketConfiguration": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "S3 Object Custom Resource",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ConfigurationRecorderLambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Sub": "var response = require('cfn-response');\nvar AWS = require('aws-sdk');\nvar s3 = new AWS.S3();\nexports.handler = function(event, context) {\n  var respond = (e) => response.send(event, context, e ? response.FAILED : response.SUCCESS, e ? e : {});\n  var params = event.ResourceProperties;\n  delete params.ServiceToken;\n  if (event.RequestType === 'Delete') {\n    params.NotificationConfiguration = {};\n    s3.putBucketNotificationConfiguration(params).promise()\n      .then((data)=>respond())\n      .catch((e)=>respond());\n  } else {\n    s3.putBucketNotificationConfiguration(params).promise()\n      .then((data)=>respond())\n      .catch((e)=>respond(e));\n  }\n};\n"
          }
        },
        "Timeout": 300,
        "Runtime": "nodejs6.10"
      }
    },
    "ConfigBucketPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "BackingLambdaConfigLogProcessor"
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "ConfigurationRecorderSanitisationResults",
            "FinalS3BucketConfigArn"
          ]
        }
      }
    },
    "ConfigurationRecorderLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "ConfigLambdaExecutionRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:GetBucketPolicy",
                    "s3:PutBucketNotification"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "ConfigurationRecorderSanitisationResults",
                      "FinalS3BucketConfigArn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "ConfigurationRecorderSanitiser": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "lambda_code/config_discovery",
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": 300,
        "Role": {
          "Fn::GetAtt": [
            "ConfigurationRecorderSanitizationLambdaExecutionRole",
            "Arn"
          ]
        }
      }
    },
    "BackingLambdaExecutionConfigLogProcessor": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "BackingLambdaExecutionCloudTrailLogProcessorPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:getObject",
                    "s3:putObject",
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3BucketConfig"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/"
      }
    },
    "ConfigurationRecorderSanitizationLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "BackingLambdaExecutionConfigLogProcessor",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "config:DescribeConfigurationRecorders",
                    "config:DescribeDeliveryChannels",
                    "config:PutConfigurationRecorder",
                    "config:StartConfigurationRecorder",
                    "config:PutDeliveryChannel",
                    "config:DescribeConfigurationRecorderStatus",
                    "config:DeleteConfigurationRecorder",
                    "config:DeleteDeliveryChannel"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": [
                    { "Fn::GetAtt": ["ConfigRole", "Arn"] }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ConfigurationRecorderSanitisationResults": {
      "Type": "Custom::ConfigurationRecorderSanitisationResults",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ConfigurationRecorderSanitiser",
            "Arn"
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "BackingLambdaExecutionConfigLogProcessor",
            "Arn"
          ]
        },
        "ConfigRecorderName": "ConfigRecorder",
        "S3BucketConfig": { "Ref": "S3BucketConfig" },
        "S3BucketConfigArn": { "Fn::GetAtt": ["S3BucketConfig", "Arn"] },
        "RecorderRoleArn": { "Fn::GetAtt": ["ConfigRole", "Arn"] }
      }
    },
    "ConfigNotificationBackupS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "CloudTrailBackupS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "ConfigNotificationBackupS3Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement":
              [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "s3:AbortMultipartUpload",
                          "s3:GetBucketLocation",
                          "s3:GetObject",
                          "s3:ListBucket",
                          "s3:ListBucketMultipartUploads",
                          "s3:PutObject"
                      ],
                      "Resource": [
                        { "Fn::GetAtt": ["ConfigNotificationBackupS3Bucket", "Arn"] }
                      ]
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "*"
                  }
              ]
            }
          }
        ]
      }
    },
    "CloudTrailBackupS3Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement":
              [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "s3:AbortMultipartUpload",
                          "s3:GetBucketLocation",
                          "s3:GetObject",
                          "s3:ListBucket",
                          "s3:ListBucketMultipartUploads",
                          "s3:PutObject"
                      ],
                      "Resource": [
                        { "Fn::GetAtt": ["CloudTrailBackupS3Bucket", "Arn"] }
                      ]
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "*"
                  }
              ]
            }
          }
        ]
      }
    },
    "CloudTrailFirehoseDeliveryRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "ConfigNotificationFirehoseDeliveryRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "ConfigNotificationFirehoseDeliveryPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "firehose_delivery_policy",
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "firehose:PutRecord",
                        "firehose:PutRecordBatch"
                    ],
                    "Resource": [
                        "arn:aws:firehose:us-west-2:112543817624:deliverystream/splunk-config-notification-cwe-monitoring"
                    ]
                }
            ]
        },
        "Roles": [{"Ref": "ConfigNotificationFirehoseDeliveryRole"}]
      }
    },
    "CloudTrailFirehoseDeliveryPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "firehose_delivery_policy",
        "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "firehose:PutRecord",
                        "firehose:PutRecordBatch"
                    ],
                    "Resource": [
                        "arn:aws:firehose:us-west-2:112543817624:deliverystream/splunk-cloudtrail-cwe-monitoring"
                    ]
                }
            ]
        },
        "Roles": [{"Ref": "CloudTrailFirehoseDeliveryRole"}]
      }
    },
    "CloudTrailEventRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "source": [
            "aws.cloudtrail"
          ]
        },
        "State": "ENABLED",
        "Targets": [
            {
                "Arn":  "arn:aws:firehose:us-west-2:112543817624:deliverystream/splunk-cloudtrail-cwe-monitoring",
                "Id": "splunk_cloudtrail_firehose_target",
                "RoleArn": {
                    "Fn::GetAtt": [
                        "CloudTrailFirehoseDeliveryRole",
                        "Arn"
                    ]
                }
            }
        ]
      }
    },
    "ConfigNotificationEventRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "source": [
            "aws.config"
          ],
          "detail-type": [
            "Config Configuration Item Change"
          ]
        },
        "State": "ENABLED",
        "Targets": [
            {
                "Arn":  "arn:aws:firehose:us-west-2:112543817624:deliverystream/splunk-config-notification-cwe-monitoring",
                "Id": "splunk_config_notification_firehose_target",
                "RoleArn": {
                    "Fn::GetAtt": [
                        "ConfigNotificationFirehoseDeliveryRole",
                        "Arn"
                    ]
                }
            }
        ]
      }
    },
    "ConfigNotificationFirehoseDeliverySetupRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "arn:aws:logs:*:*:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "iam:GetRole",
                  "iam:PassRole"
                ],
                "Resource": "arn:aws:iam::*:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "firehose:CreateDeliveryStream",
                  "firehose:DeleteDeliveryStream"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:ListBucket",
                  "s3:DeleteBucket"
                ],
                "Resource": "*"
              }
            ]
          }
        }]
      }
    },
    "CloudTrailFirehoseDeliverySetupRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "arn:aws:logs:*:*:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "iam:GetRole",
                  "iam:PassRole"
                ],
                "Resource": "arn:aws:iam::*:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "firehose:CreateDeliveryStream",
                  "firehose:DeleteDeliveryStream"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:ListBucket",
                  "s3:DeleteBucket"
                ],
                "Resource": "*"
              }
            ]
          }
        }]
      }
    },
    "CloudTrailFirehoseDeliverySetupLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "lambda_code/firehose_delivery_setup_cloudtrail",
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt" : ["CloudTrailFirehoseDeliverySetupRole", "Arn"] },
        "Runtime": "python2.7",
        "Timeout": "30",
        "Environment": {
          "Variables": {
            "SPLUNK_HEC_URL": {
              "Ref": "SplunkHttpEventCollectorURL"
            },
            "SPLUNK_CLOUDTRAIL_HEC_TOKEN": {
              "Ref": "CloudTrailSplunkHttpEventCollectorToken"
            }
          }
        }
      }
    },
    "CloudTrailFirehoseDeliverySetupCustomResource": {
      "Type": "Custom::CustomResource",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["CloudTrailFirehoseDeliverySetupLambda", "Arn"] },
        "CloudTrailBackupS3Bucket": {"Fn::GetAtt" : ["CloudTrailBackupS3Bucket", "Arn"] },
        "CloudTrailBackupS3Role": {"Fn::GetAtt" : ["CloudTrailBackupS3Role", "Arn"] },
        "CloudTrailBackupS3BucketName": { "Ref" : "CloudTrailBackupS3Bucket" },
        "CloudTrailBackupS3RoleName": { "Ref" : "CloudTrailBackupS3Role" }
      }
    },
    "ConfigNotificationFirehoseDeliverySetupLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "lambda_code/firehose_delivery_setup_config_notification",
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt" : ["ConfigNotificationFirehoseDeliverySetupRole", "Arn"] },
        "Runtime": "python2.7",
        "Timeout": "30",
        "Environment": {
          "Variables": {
            "SPLUNK_HEC_URL": {
              "Ref": "SplunkHttpEventCollectorURL"
            },
            "SPLUNK_CONFIG_NOTIFICATION_HEC_TOKEN": {
              "Ref": "ConfigNotificationSplunkHttpEventCollectorToken"
            }
          }
        }
      }
    },
    "ConfigNotificationFirehoseDeliverySetupCustomResource": {
      "Type": "Custom::CustomResource",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["ConfigNotificationFirehoseDeliverySetupLambda", "Arn"] },
        "ConfigNotificationBackupS3Bucket": {"Fn::GetAtt" : ["ConfigNotificationBackupS3Bucket", "Arn"] },
        "ConfigNotificationBackupS3Role": {"Fn::GetAtt" : ["ConfigNotificationBackupS3Role", "Arn"] },
        "ConfigNotificationBackupS3BucketName": { "Ref": "ConfigNotificationBackupS3Bucket" },
        "ConfigNotificationBackupS3RoleName": { "Ref" : "ConfigNotificationBackupS3Role" }
      }
    },
    "TrumpetDynamoDBTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" : "metric_dimension",
            "AttributeType" : "S"
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "metric_dimension",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "100",
          "WriteCapacityUnits" : "100"
        },
        "TableName" : "splunk_metrics_highwater"
      }
    },
    "BackingLambdaCloudWatchMetricsProcessor": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "lambda_code/splunk_metrics_poller",
        "Description": "Send CloudWatch Metrics to Splunk using HTTP event collector",
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "BackingLambdaExecutionRoleCloudWatchMetricsProcessor",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 300,
        "Environment": {
          "Variables": {
            "SPLUNK_HEC_URL": {
              "Ref": "SplunkHttpEventCollectorURL"
            },
            "SPLUNK_HEC_TOKEN": {
              "Ref": "CloudWatchSplunkHttpEventCollectorToken"
            }
          }
        }
      }
    },
    "BackingLambdaExecutionRoleCloudWatchMetricsProcessor": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "BackingLambdaExecutionCloudWatchMetricsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:UpdateFunctionConfiguration"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:ListMetrics"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/"
      }
    },
    "EventRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "EventRule",
        "ScheduleExpression": "cron(4,9,14,19,24,29,34,39,44,49,54,59 * * * ? *)",
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["BackingLambdaCloudWatchMetricsProcessor", "Arn"] },
          "Id": "TargetFunctionMetricsPoller"
        }]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "BackingLambdaCloudWatchMetricsProcessor" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["EventRule", "Arn"] }
      }
    }
  }
}
