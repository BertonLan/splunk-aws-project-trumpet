{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template for CloudTrail data ingest into Splunk using an HTTP Event Collector logger",
  "Parameters": {
    "SplunkHttpEventCollectorURL": {
      "Description": "The HEC endpoint server and port (default 8088) of the the Splunk environment which will receive updates on the status of the action as it completes. (format - https://server:port/services/collector)",
      "Type": "String"
    },
    "CloudTrailSplunkHttpEventCollectorToken": {
      "Description": "The enabled HEC token on the Splunk environment for the CloudTrail sourcetype. (format - 12345678-qwer-asdf-zxcv-123456789qwe)",
      "Type": "String"
    },
    "ConfigSplunkHttpEventCollectorToken": {
      "Description": "The enabled HEC token on the Splunk environment for the Config sourcetype. (format - 12345678-qwer-asdf-zxcv-123456789qwe)",
      "Type": "String"
    },
    "CloudTrailName": {
      "Description": "The name of the new CloudTrail trail that will be generated and sent to Splunk once this template is deployed.",
      "Type": "String"
    }
  },
  "Resources": {
    "S3BucketCloudTrail": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "S3BucketConfig": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "CloudTrailBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "S3BucketCloudTrail"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSCloudTrailAclCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": {
                "Fn::GetAtt": [
                  "S3BucketCloudTrail",
                  "Arn"
                ]
              }
            },
            {
              "Sid": "AWSCloudTrailWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketCloudTrail"
                    },
                    "/AWSLogs/",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "BackingLambdaExecutionCloudTrailLogProcessor": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "BackingLambdaExecutionCloudTrailLogProcessorPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:getObject",
                    "s3:putObject",
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3BucketCloudTrail"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/"
      }
    },
    "BackingLambdaCloudTrailLogProcessor": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "lambda_code/cloudtrail_logger",
        "Description": "Stream events from an AWS S3 bucket being updated by AWS CloudTrail to Splunk using HTTP event collector",
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "BackingLambdaExecutionCloudTrailLogProcessor",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 300,
        "Environment": {
          "Variables": {
            "SPLUNK_HEC_URL": {
              "Ref": "SplunkHttpEventCollectorURL"
            },
            "SPLUNK_HEC_TOKEN": {
              "Ref": "CloudTrailSplunkHttpEventCollectorToken"
            }
          }
        }
      }
    },
    "CloudTrailBucketConfiguration": {
      "Type": "Custom::S3CloudTrailBucketConfiguration",
      "DependsOn": [
        "CloudTrailBucketPermission",
        "CloudTrailBucketPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CloudTrailUpdateBucketConfiguration",
            "Arn"
          ]
        },
        "Bucket": {
          "Fn::GetAtt": [
            "CloudTrailSanitisationResults",
            "FinalS3BucketCloudTrail"
          ]
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "BackingLambdaCloudTrailLogProcessor",
                  "Arn"
                ]
              }
            }
          ]
        }
      }
    },
    "CloudTrailUpdateBucketConfiguration": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "S3 Object Custom Resource",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "CloudTrailLambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Sub": "var response = require('cfn-response');\nvar AWS = require('aws-sdk');\nvar s3 = new AWS.S3();\nexports.handler = function(event, context) {\n  var respond = (e) => response.send(event, context, e ? response.FAILED : response.SUCCESS, e ? e : {});\n  var params = event.ResourceProperties;\n  delete params.ServiceToken;\n  if (event.RequestType === 'Delete') {\n    params.NotificationConfiguration = {};\n    s3.putBucketNotificationConfiguration(params).promise()\n      .then((data)=>respond())\n      .catch((e)=>respond());\n  } else {\n    s3.putBucketNotificationConfiguration(params).promise()\n      .then((data)=>respond())\n      .catch((e)=>respond(e));\n  }\n};\n"
          }
        },
        "Timeout": 300,
        "Runtime": "nodejs4.3"
      }
    },
    "CloudTrailBucketPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "BackingLambdaCloudTrailLogProcessor"
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudTrailSanitisationResults",
            "FinalS3BucketCloudTrailArn"
          ]
        }
      }
    },
    "CloudTrailLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "CloudTrailLambdaExecutionRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:PutBucketNotification",
                    "s3:GetBucketPolicy"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "CloudTrailSanitisationResults",
                      "FinalS3BucketCloudTrailArn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "ConfigRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "config.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSConfigRole"
        ],
        "Policies": [
          {
            "PolicyName": "ConfigRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3BucketConfig"
                        },
                        "/AWSLogs/",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "/*"
                      ]
                    ]
                  },
                  "Condition": {
                    "StringLike": {
                      "s3:x-amz-acl": "bucket-owner-full-control"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "config:Put*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetBucketAcl"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3BucketConfig"
                        }
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "BackingLambdaExecutionConfigLogProcessorRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "BackingLambdaExecutionConfigLogProcessorPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:getObject",
                    "s3:putObject",
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "ConfigurationRecorderSanitisationResults",
                            "FinalS3BucketConfigArn"
                          ]
                        },
                        "/AWSLogs/",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/"
      }
    },
    "BackingLambdaConfigLogProcessor": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "lambda_code/config_logger",
        "Description": "Stream events from an AWS S3 bucket being updated by AWS config to Splunk using HTTP event collector",
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "BackingLambdaExecutionConfigLogProcessorRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 300,
        "Environment": {
          "Variables": {
            "SPLUNK_HEC_URL": {
              "Ref": "SplunkHttpEventCollectorURL"
            },
            "SPLUNK_HEC_TOKEN": {
              "Ref": "ConfigSplunkHttpEventCollectorToken"
            }
          }
        }
      }
    },
    "ConfigBucketConfiguration": {
      "Type": "Custom::S3ConfigBucketConfiguration",
      "DependsOn": [
        "ConfigBucketPermission"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ConfigUpdateBucketConfiguration",
            "Arn"
          ]
        },
        "Bucket": {
          "Fn::GetAtt": [
            "ConfigurationRecorderSanitisationResults",
            "FinalS3BucketConfig"
          ]
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "BackingLambdaConfigLogProcessor",
                  "Arn"
                ]
              }
            }
          ]
        }
      }
    },
    "ConfigUpdateBucketConfiguration": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "S3 Object Custom Resource",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ConfigurationRecorderLambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Sub": "var response = require('cfn-response');\nvar AWS = require('aws-sdk');\nvar s3 = new AWS.S3();\nexports.handler = function(event, context) {\n  var respond = (e) => response.send(event, context, e ? response.FAILED : response.SUCCESS, e ? e : {});\n  var params = event.ResourceProperties;\n  delete params.ServiceToken;\n  if (event.RequestType === 'Delete') {\n    params.NotificationConfiguration = {};\n    s3.putBucketNotificationConfiguration(params).promise()\n      .then((data)=>respond())\n      .catch((e)=>respond());\n  } else {\n    s3.putBucketNotificationConfiguration(params).promise()\n      .then((data)=>respond())\n      .catch((e)=>respond(e));\n  }\n};\n"
          }
        },
        "Timeout": 300,
        "Runtime": "nodejs6.10"
      }
    },
    "ConfigBucketPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "BackingLambdaConfigLogProcessor"
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "ConfigurationRecorderSanitisationResults",
            "FinalS3BucketConfigArn"
          ]
        }
      }
    },
    "ConfigurationRecorderLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "ConfigLambdaExecutionRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:GetBucketPolicy",
                    "s3:PutBucketNotification"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "ConfigurationRecorderSanitisationResults",
                      "FinalS3BucketConfigArn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "ConfigurationRecorderSanitiser": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "lambda_code/config_discovery",
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": 300,
        "Role": {
          "Fn::GetAtt": [
            "ConfigurationRecorderSanitizationLambdaExecutionRole",
            "Arn"
          ]
        }
      }
    },
    "ConfigurationRecorderSanitizationLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "BackingLambdaExecutionCloudTrailLogProcessor",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "config:DescribeConfigurationRecorders",
                    "config:DescribeDeliveryChannels",
                    "config:PutConfigurationRecorder",
                    "config:StartConfigurationRecorder",
                    "config:PutDeliveryChannel",
                    "config:DescribeConfigurationRecorderStatus",
                    "config:DeleteConfigurationRecorder",
                    "config:DeleteDeliveryChannel"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": [
                    { "Fn::GetAtt": ["ConfigRole", "Arn"] }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ConfigurationRecorderSanitisationResults": {
      "Type": "Custom::ConfigurationRecorderSanitisationResults",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ConfigurationRecorderSanitiser",
            "Arn"
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "BackingLambdaExecutionCloudTrailLogProcessor",
            "Arn"
          ]
        },
        "ConfigRecorderName": "ConfigRecorder",
        "S3BucketConfig": { "Ref": "S3BucketConfig" },
        "S3BucketConfigArn": { "Fn::GetAtt": ["S3BucketConfig", "Arn"] },
        "RecorderRoleArn": { "Fn::GetAtt": ["ConfigRole", "Arn"] }
      }
    },
    "CloudTrailSanitiser": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "lambda_code/cloudtrail_discovery",
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": 300,
        "Role": {
          "Fn::GetAtt": [
            "CloudTrailSanitizationLambdaExecutionRole",
            "Arn"
          ]
        }
      }
    },
    "CloudTrailSanitizationLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "BackingLambdaExecutionCloudTrailLogProcessor",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudtrail:DescribeTrails",
                    "cloudtrail:CreateTrail",
                    "cloudtrail:StartLogging"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CloudTrailSanitisationResults": {
      "Type": "Custom::CloudTrailSanitisationResults",
      "DependsOn": ["CloudTrailBucketPolicy"],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CloudTrailSanitiser",
            "Arn"
          ]
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "BackingLambdaExecutionCloudTrailLogProcessor",
            "Arn"
          ]
        },
        "S3BucketCloudTrail": { "Ref": "S3BucketCloudTrail" },
        "S3BucketCloudTrailArn": { "Fn::GetAtt": ["S3BucketCloudTrail", "Arn"] },
        "CloudTrailName": {"Ref": "CloudTrailName"},
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "BackingLambdaCloudTrailLogProcessor",
                  "Arn"
                ]
              }
            }
          ]
        }
      }
    }
  }
}